#!/usr/bin/env python

import argparse
import json
import os
import sys
import yaml

from neutronclient.v2_0 import client as neutronclient
from novaclient import client as novaclient

def main():
    parser = argparse.ArgumentParser(
        prog='build-nodes-json.py',
        description='Tool for collecting virtual IPMI details',
    )
    parser.add_argument('--env',
                        dest='env',
                        default=None,
                        help='YAML file containing OVB environment details')
    parser.add_argument('--bmc_prefix',
                        dest='bmc_prefix',
                        default='bmc',
                        help='BMC name prefix')
    parser.add_argument('--baremetal_prefix',
                        dest='baremetal_prefix',
                        default='baremetal',
                        help='Baremetal name prefix')
    parser.add_argument('--private_net',
                        dest='private_net',
                        default='private',
                        help='Private network name')
    parser.add_argument('--provision_net',
                        dest='provision_net',
                        default='provision',
                        help='Provisioning network name')
    args = parser.parse_args()

    if args.env is None:
        bmc_base = args.bmc_prefix
        baremetal_base = args.baremetal_prefix
        private_net = args.private_net
        provision_net = args.provision_net
    else:
        with open(args.env) as f:
            e = yaml.safe_load(f)
        bmc_base = e['parameters']['bmc_prefix']
        baremetal_base = e['parameters']['baremetal_prefix']
        private_net = e['parameters']['private_net']
        provision_net = e['parameters']['provision_net']
    username = os.environ.get('OS_USERNAME')
    password = os.environ.get('OS_PASSWORD')
    tenant = os.environ.get('OS_TENANT_NAME')
    auth_url = os.environ.get('OS_AUTH_URL')
    node_template = {
        'pm_type': 'pxe_ipmitool',
        'mac': '',
        'cpu': '',
        'memory': '',
        'disk': '',
        'arch': 'x86_64',
        'pm_user': 'admin',
        'pm_password': 'password',
        'pm_addr': '',
        }

    if not username or not password or not tenant or not auth_url:
        print('Source an appropriate rc file first')
        sys.exit(1)

    nova = novaclient.Client(2, username, password, tenant, auth_url)
    neutron = neutronclient.Client(
        username=username,
        password=password,
        tenant_name=tenant,
        auth_url=auth_url
    )

    bmc_id = [ s.id for s in nova.servers.list() if 'bmc' in s.name ]
    bm_id = [ s.id for s in nova.servers.list() if 'baremetal' in s.name ]

    all_ports = sorted(neutron.list_ports()['ports'], key=lambda x: x['name'])
    bmc_ports = [p for p in all_ports if p['device_id'] in bmc_id]
    bm_ports = [p for p in all_ports if p['device_id'] in bm_id]
    if len(bmc_ports) != len(bm_ports):
        raise RuntimeError('Found different numbers of baremetal and '
                           'bmc ports.')
    nodes = []
    bmc_bm_pairs = []

    for bmc_port, baremetal_port in zip(bmc_ports, bm_ports):
        baremetal = nova.servers.get(baremetal_port['device_id'])
        node = dict(node_template)
        node['pm_addr'] = bmc_port['fixed_ips'][0]['ip_address']
        bmc_bm_pairs.append((node['pm_addr'], baremetal.name))
        node['mac'] = [baremetal.addresses[provision_net][0]['OS-EXT-IPS-MAC:mac_addr']]
        flavor = nova.flavors.get(baremetal.flavor['id'])
        node['cpu'] = flavor.vcpus
        node['memory'] = flavor.ram
        node['disk'] = flavor.disk
        nodes.append(node)

    with open('nodes.json', 'w') as node_file:
        contents = json.dumps({'nodes': nodes}, indent=2)
        node_file.write(contents)
        print(contents)

    with open('bmc_bm_pairs', 'w') as pairs_file:
        pairs_file.write('# A list of BMC addresses and the name of the '
                         'instance that BMC manages.\n')
        for i in bmc_bm_pairs:
            pair = '%s %s' % i
            pairs_file.write(pair + '\n')
            print(pair)

if __name__ == '__main__':
    main()
